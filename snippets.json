[["accumulate", "\n<snippet>\n\t<content><![CDATA[std::accumulate($1.begin(),$1.end(),$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_accumulate</description>\n</snippet>\n"], ["adjacent_difference", "\n<snippet>\n\t<content><![CDATA[std::adjacent_difference($1.begin(),$1.end(),$2.begin())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_adjacent_difference</description>\n</snippet>\n"], ["adjacent_find", "\n<snippet>\n\t<content><![CDATA[std::adjacent_find($1.begin(),$1.end())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_adjacent_find</description>\n</snippet>\n"], ["all_of", "\n<snippet>\n\t<content><![CDATA[std::all_of($1.begin(),$1.end(),[=](auto a){return $2;},$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_all_of</description>\n</snippet>\n"], ["any_of", "\n<snippet>\n\t<content><![CDATA[std::any_of()$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_any_of</description>\n</snippet>\n"], ["none_of", "\n<snippet>\n\t<content><![CDATA[std::none_of()$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_none_of</description>\n</snippet>\n"], ["binary_search", "\n<snippet>\n\t<content><![CDATA[std::binary_search($1.begin(),$1.end(),$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_binary_search</description>\n</snippet>\n"], ["clamp", "\n<snippet>\n\t<content><![CDATA[std::clamp($1,$2,$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_clamp</description>\n</snippet>\n"], ["compare_3way", "\n<snippet>\n\t<content><![CDATA[std::compare_3way($1,$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_compare_3way</description>\n</snippet>\n"], ["copy", "\n<snippet>\n\t<content><![CDATA[std::copy($1.begin(),$1.end(),$2.begin())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_copy</description>\n</snippet>\n"], ["copy_if", "\n<snippet>\n\t<content><![CDATA[std::copy_if($1.begin(),$1.end(),$2.begin(),[=](auto a){return $3;},$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_copy_if</description>\n</snippet>\n"], ["copy_backward", "\n<snippet>\n\t<content><![CDATA[std::copy_backward($1.begin(),$1.end(),$2.end())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_copy_backward</description>\n</snippet>\n"], ["copy_n", "\n<snippet>\n\t<content><![CDATA[std::copy_n($1.begin(),$2,$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_copy_n</description>\n</snippet>\n"], ["count", "\n<snippet>\n\t<content><![CDATA[std::count($1.begin(),$1.end(),$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_count</description>\n</snippet>\n"], ["count_if", "\n<snippet>\n\t<content><![CDATA[std::count_if($1.begin(),$1.end(),[=](auto a){return $2;},$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_count_if</description>\n</snippet>\n"], ["count", "\n<snippet>\n\t<content><![CDATA[std::count($1.begin(),$1.end(),$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_count</description>\n</snippet>\n"], ["count_if", "\n<snippet>\n\t<content><![CDATA[std::count_if($1.begin(),$1.end(),[=](auto a){return $2;},$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_count_if</description>\n</snippet>\n"], ["equal", "\n<snippet>\n\t<content><![CDATA[std::equal($1.begin(),$1.end(),$2.begin())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_equal</description>\n</snippet>\n"], ["equal_range", "\n<snippet>\n\t<content><![CDATA[std::equal_range($1.begin(),$1.end(),$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_equal_range</description>\n</snippet>\n"], ["exclusive_scan", "\n<snippet>\n\t<content><![CDATA[std::exclusive_scan($1.begin(),$1.end(),$2.begin(),$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_exclusive_scan</description>\n</snippet>\n"], ["fill", "\n<snippet>\n\t<content><![CDATA[std::fill($1.begin(),$1.end(),$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_fill</description>\n</snippet>\n"], ["fill_n", "\n<snippet>\n\t<content><![CDATA[std::fill_n($1.begin(),$2,$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_fill_n</description>\n</snippet>\n"], ["find", "\n<snippet>\n\t<content><![CDATA[std::find($1.begin(),$1.end(),$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_find</description>\n</snippet>\n"], ["find_if", "\n<snippet>\n\t<content><![CDATA[std::find_if($1.begin(),$1.end(),[=](auto a){return $2;},$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_find_if</description>\n</snippet>\n"], ["find_if_not", "\n<snippet>\n\t<content><![CDATA[std::find_if_not($1.begin(),$1.end(),[=](auto a){return $2;},$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_find_if_not</description>\n</snippet>\n"], ["find_end", "\n<snippet>\n\t<content><![CDATA[std::find_end($1.begin(),$1.end(),$2.begin(),$2.end())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_find_end</description>\n</snippet>\n"], ["find_first_of", "\n<snippet>\n\t<content><![CDATA[std::find_first_of($1.begin(),$1.end(),$2.begin(),$2.end())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_find_first_of</description>\n</snippet>\n"], ["find", "\n<snippet>\n\t<content><![CDATA[std::find($1.begin(),$1.end(),$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_find</description>\n</snippet>\n"], ["find_if", "\n<snippet>\n\t<content><![CDATA[std::find_if($1.begin(),$1.end(),[=](auto a){return $2;},$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_find_if</description>\n</snippet>\n"], ["find_if_not", "\n<snippet>\n\t<content><![CDATA[std::find_if_not($1.begin(),$1.end(),[=](auto a){return $2;},$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_find_if_not</description>\n</snippet>\n"], ["find", "\n<snippet>\n\t<content><![CDATA[std::find($1.begin(),$1.end(),$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_find</description>\n</snippet>\n"], ["find_if", "\n<snippet>\n\t<content><![CDATA[std::find_if($1.begin(),$1.end(),[=](auto a){return $2;},$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_find_if</description>\n</snippet>\n"], ["find_if_not", "\n<snippet>\n\t<content><![CDATA[std::find_if_not($1.begin(),$1.end(),[=](auto a){return $2;},$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_find_if_not</description>\n</snippet>\n"], ["for_each", "\n<snippet>\n\t<content><![CDATA[std::for_each($1.begin(),$1.end(),[=](auto a){return $2;},$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_for_each</description>\n</snippet>\n"], ["for_each_n", "\n<snippet>\n\t<content><![CDATA[std::for_each_n($1.begin(),$2,[=](auto a){return $3;},$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_for_each_n</description>\n</snippet>\n"], ["generate", "\n<snippet>\n\t<content><![CDATA[std::generate($1.begin(),$1.end(),$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_generate</description>\n</snippet>\n"], ["generate_n", "\n<snippet>\n\t<content><![CDATA[std::generate_n($1.begin(),$2,$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_generate_n</description>\n</snippet>\n"], ["includes", "\n<snippet>\n\t<content><![CDATA[std::includes($1.begin(),$1.end(),$2.begin(),$2.end())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_includes</description>\n</snippet>\n"], ["inclusive_scan", "\n<snippet>\n\t<content><![CDATA[std::inclusive_scan($1.begin(),$1.end(),$2.begin())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_inclusive_scan</description>\n</snippet>\n"], ["inner_product", "\n<snippet>\n\t<content><![CDATA[std::inner_product($1.begin(),$1.end(),$2.begin(),$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_inner_product</description>\n</snippet>\n"], ["inplace_merge", "\n<snippet>\n\t<content><![CDATA[std::inplace_merge($1.begin(),$2,$1.end())]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_inplace_merge</description>\n</snippet>\n"], ["iota", "\n<snippet>\n\t<content><![CDATA[std::iota($1.begin(),$1.end(),$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_iota</description>\n</snippet>\n"], ["is_heap", "\n<snippet>\n\t<content><![CDATA[std::is_heap($1.begin(),$1.end())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_is_heap</description>\n</snippet>\n"], ["is_heap_until", "\n<snippet>\n\t<content><![CDATA[std::is_heap_until($1.begin(),$1.end())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_is_heap_until</description>\n</snippet>\n"], ["is_partitioned", "\n<snippet>\n\t<content><![CDATA[std::is_partitioned($1.begin(),$1.end(),[=](auto a){return $2;},$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_is_partitioned</description>\n</snippet>\n"], ["is_permutation", "\n<snippet>\n\t<content><![CDATA[std::is_permutation($1.begin(),$1.end(),$2.begin())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_is_permutation</description>\n</snippet>\n"], ["is_sorted", "\n<snippet>\n\t<content><![CDATA[std::is_sorted($1.begin(),$1.end())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_is_sorted</description>\n</snippet>\n"], ["is_sorted_until", "\n<snippet>\n\t<content><![CDATA[std::is_sorted_until($1.begin(),$1.end())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_is_sorted_until</description>\n</snippet>\n"], ["iter_swap", "\n<snippet>\n\t<content><![CDATA[std::iter_swap($1,$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_iter_swap</description>\n</snippet>\n"], ["lexicographical_compare", "\n<snippet>\n\t<content><![CDATA[std::lexicographical_compare($1.begin(),$1.end(),$2.begin(),$2.end())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_lexicographical_compare</description>\n</snippet>\n"], ["lexicographical_compare_3way", "\n<snippet>\n\t<content><![CDATA[std::lexicographical_compare_3way($1.begin(),$1.end(),$2.begin(),$2.end(),$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_lexicographical_compare_3way</description>\n</snippet>\n"], ["lower_bound", "\n<snippet>\n\t<content><![CDATA[std::lower_bound($1.begin(),$1.end(),$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_lower_bound</description>\n</snippet>\n"], ["make_heap", "\n<snippet>\n\t<content><![CDATA[std::make_heap($1.begin(),$1.end())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_make_heap</description>\n</snippet>\n"], ["max", "\n<snippet>\n\t<content><![CDATA[std::max($1,$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_max</description>\n</snippet>\n"], ["max_element", "\n<snippet>\n\t<content><![CDATA[std::max_element($1.begin(),$1.end())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_max_element</description>\n</snippet>\n"], ["merge", "\n<snippet>\n\t<content><![CDATA[std::merge($1.begin(),$1.end(),$2.begin(),$2.end(),$3.begin())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_merge</description>\n</snippet>\n"], ["min", "\n<snippet>\n\t<content><![CDATA[std::min($1,$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_min</description>\n</snippet>\n"], ["minmax", "\n<snippet>\n\t<content><![CDATA[std::minmax($1,$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_minmax</description>\n</snippet>\n"], ["minmax_element", "\n<snippet>\n\t<content><![CDATA[std::minmax_element($1.begin(),$1.end())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_minmax_element</description>\n</snippet>\n"], ["min_element", "\n<snippet>\n\t<content><![CDATA[std::min_element($1.begin(),$1.end())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_min_element</description>\n</snippet>\n"], ["mismatch", "\n<snippet>\n\t<content><![CDATA[std::mismatch($1.begin(),$1.end(),$2.begin())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_mismatch</description>\n</snippet>\n"], ["move", "\n<snippet>\n\t<content><![CDATA[std::move($1.begin(),$1.end(),$2.begin())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_move</description>\n</snippet>\n"], ["move_backward", "\n<snippet>\n\t<content><![CDATA[std::move_backward($1.begin(),$1.end(),$2.end())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_move_backward</description>\n</snippet>\n"], ["next_permutation", "\n<snippet>\n\t<content><![CDATA[std::next_permutation($1.begin(),$1.end())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_next_permutation</description>\n</snippet>\n"], ["nth_element", "\n<snippet>\n\t<content><![CDATA[std::nth_element($1.begin(),$2,$1.end())]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_nth_element</description>\n</snippet>\n"], ["partial_sort", "\n<snippet>\n\t<content><![CDATA[std::partial_sort($1.begin(),$2,$1.end())]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_partial_sort</description>\n</snippet>\n"], ["partial_sort_copy", "\n<snippet>\n\t<content><![CDATA[std::partial_sort_copy($1.begin(),$1.end(),$2.begin(),$2.end())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_partial_sort_copy</description>\n</snippet>\n"], ["partial_sum", "\n<snippet>\n\t<content><![CDATA[std::partial_sum($1.begin(),$1.end(),$2.begin())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_partial_sum</description>\n</snippet>\n"], ["partition", "\n<snippet>\n\t<content><![CDATA[std::partition($1.begin(),$1.end(),[=](auto a){return $2;},$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_partition</description>\n</snippet>\n"], ["partition_copy", "\n<snippet>\n\t<content><![CDATA[std::partition_copy($1.begin(),$1.end(),$2.begin(),$3.begin(),[=](auto a){return $4;},$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_partition_copy</description>\n</snippet>\n"], ["partition_point", "\n<snippet>\n\t<content><![CDATA[std::partition_point($1.begin(),$1.end(),[=](auto a){return $2;},$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_partition_point</description>\n</snippet>\n"], ["pop_heap", "\n<snippet>\n\t<content><![CDATA[std::pop_heap($1.begin(),$1.end())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_pop_heap</description>\n</snippet>\n"], ["prev_permutation", "\n<snippet>\n\t<content><![CDATA[std::prev_permutation($1.begin(),$1.end())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_prev_permutation</description>\n</snippet>\n"], ["push_heap", "\n<snippet>\n\t<content><![CDATA[std::push_heap($1.begin(),$1.end())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_push_heap</description>\n</snippet>\n"], ["random_shuffle", "\n<snippet>\n\t<content><![CDATA[std::random_shuffle($1.begin(),$1.end())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_random_shuffle</description>\n</snippet>\n"], ["shuffle", "\n<snippet>\n\t<content><![CDATA[std::shuffle($1.begin(),$1.end())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_shuffle</description>\n</snippet>\n"], ["reduce", "\n<snippet>\n\t<content><![CDATA[std::reduce($1.begin(),$1.end())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_reduce</description>\n</snippet>\n"], ["remove", "\n<snippet>\n\t<content><![CDATA[std::remove($1.begin(),$1.end(),$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_remove</description>\n</snippet>\n"], ["remove_if", "\n<snippet>\n\t<content><![CDATA[std::remove_if($1.begin(),$1.end(),[=](auto a){return $2;},$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_remove_if</description>\n</snippet>\n"], ["remove_copy", "\n<snippet>\n\t<content><![CDATA[std::remove_copy($1.begin(),$1.end(),$2.begin(),$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_remove_copy</description>\n</snippet>\n"], ["remove_copy_if", "\n<snippet>\n\t<content><![CDATA[std::remove_copy_if($1.begin(),$1.end(),$2.begin(),[=](auto a){return $3;},$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_remove_copy_if</description>\n</snippet>\n"], ["replace", "\n<snippet>\n\t<content><![CDATA[std::replace($1.begin(),$1.end(),$2,$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_replace</description>\n</snippet>\n"], ["replace_if", "\n<snippet>\n\t<content><![CDATA[std::replace_if($1.begin(),$1.end(),[=](auto a){return $2;},$3,$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_replace_if</description>\n</snippet>\n"], ["replace_copy", "\n<snippet>\n\t<content><![CDATA[std::replace_copy($1.begin(),$1.end(),$2.begin(),$3,$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_replace_copy</description>\n</snippet>\n"], ["replace_copy_if", "\n<snippet>\n\t<content><![CDATA[std::replace_copy_if($1.begin(),$1.end(),$2.begin(),[=](auto a){return $3;},$4,$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_replace_copy_if</description>\n</snippet>\n"], ["replace_copy", "\n<snippet>\n\t<content><![CDATA[std::replace_copy($1.begin(),$1.end(),$2.begin(),$3,$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_replace_copy</description>\n</snippet>\n"], ["replace_copy_if", "\n<snippet>\n\t<content><![CDATA[std::replace_copy_if($1.begin(),$1.end(),$2.begin(),[=](auto a){return $3;},$4,$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_replace_copy_if</description>\n</snippet>\n"], ["reverse", "\n<snippet>\n\t<content><![CDATA[std::reverse($1.begin(),$1.end())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_reverse</description>\n</snippet>\n"], ["reverse_copy", "\n<snippet>\n\t<content><![CDATA[std::reverse_copy($1.begin(),$1.end(),$2.begin())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_reverse_copy</description>\n</snippet>\n"], ["rotate", "\n<snippet>\n\t<content><![CDATA[std::rotate($1.begin(),$2.begin(),$1.end())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_rotate</description>\n</snippet>\n"], ["rotate_copy", "\n<snippet>\n\t<content><![CDATA[std::rotate_copy($1.begin(),$3.begin(),$1.end(),$2.begin())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_rotate_copy</description>\n</snippet>\n"], ["sample", "\n<snippet>\n\t<content><![CDATA[std::sample($1.begin(),$1.end(),$2,$3,$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_sample</description>\n</snippet>\n"], ["search", "\n<snippet>\n\t<content><![CDATA[std::search($1.begin(),$1.end(),$2.begin(),$2.end())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_search</description>\n</snippet>\n"], ["search_n", "\n<snippet>\n\t<content><![CDATA[std::search_n($1.begin(),$1.end(),$2,$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_search_n</description>\n</snippet>\n"], ["set_difference", "\n<snippet>\n\t<content><![CDATA[std::set_difference($1.begin(),$1.end(),$2.begin(),$2.end(),$3.begin())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_set_difference</description>\n</snippet>\n"], ["set_intersection", "\n<snippet>\n\t<content><![CDATA[std::set_intersection($1.begin(),$1.end(),$2.begin(),$2.end(),$3.begin())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_set_intersection</description>\n</snippet>\n"], ["set_symmetric_difference", "\n<snippet>\n\t<content><![CDATA[std::set_symmetric_difference($1.begin(),$1.end(),$2.begin(),$2.end(),$3.begin())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_set_symmetric_difference</description>\n</snippet>\n"], ["set_union", "\n<snippet>\n\t<content><![CDATA[std::set_union($1.begin(),$1.end(),$2.begin(),$2.end(),$3.begin())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_set_union</description>\n</snippet>\n"], ["shift_left", "\n<snippet>\n\t<content><![CDATA[std::shift_left($1.begin(),$1.end(),$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_shift_left</description>\n</snippet>\n"], ["shift_right", "\n<snippet>\n\t<content><![CDATA[std::shift_right()$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_shift_right</description>\n</snippet>\n"], ["sort", "\n<snippet>\n\t<content><![CDATA[std::sort($1.begin(),$1.end())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_sort</description>\n</snippet>\n"], ["sort_heap", "\n<snippet>\n\t<content><![CDATA[std::sort_heap($1.begin(),$1.end())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_sort_heap</description>\n</snippet>\n"], ["stable_partition", "\n<snippet>\n\t<content><![CDATA[std::stable_partition($1.begin(),$1.end(),[=](auto a){return $2;},$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_stable_partition</description>\n</snippet>\n"], ["stable_sort", "\n<snippet>\n\t<content><![CDATA[std::stable_sort($1.begin(),$1.end())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_stable_sort</description>\n</snippet>\n"], ["swap_ranges", "\n<snippet>\n\t<content><![CDATA[std::swap_ranges($1.begin(),$1.end(),$2.begin())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_swap_ranges</description>\n</snippet>\n"], ["transform", "\n<snippet>\n\t<content><![CDATA[std::transform($1.begin(),$1.end(),$2.begin(),[=](auto a){return $3;},$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_transform</description>\n</snippet>\n"], ["transform_exclusive_scan", "\n<snippet>\n\t<content><![CDATA[std::transform_exclusive_scan($1.begin(),$1.end(),$2.begin(),$3,[=](auto a,auto b){return $4;},$5,[=](auto a){return $6;},$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_transform_exclusive_scan</description>\n</snippet>\n"], ["transform_inclusive_scan", "\n<snippet>\n\t<content><![CDATA[std::transform_inclusive_scan($1.begin(),$1.end(),$2.begin(),[=](auto a,auto b){return $3;},$4,[=](auto a){return $5;},$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_transform_inclusive_scan</description>\n</snippet>\n"], ["transform_reduce", "\n<snippet>\n\t<content><![CDATA[std::transform_reduce($1.begin(),$1.end(),$2.begin(),$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_transform_reduce</description>\n</snippet>\n"], ["unique", "\n<snippet>\n\t<content><![CDATA[std::unique($1.begin(),$1.end())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_unique</description>\n</snippet>\n"], ["unique_copy", "\n<snippet>\n\t<content><![CDATA[std::unique_copy($1.begin(),$1.end(),$2.begin())$0]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_unique_copy</description>\n</snippet>\n"], ["upper_bound", "\n<snippet>\n\t<content><![CDATA[std::upper_bound($1.begin(),$1.end(),$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_upper_bound</description>\n</snippet>\n"], ["gcd", "\n<snippet>\n\t<content><![CDATA[std::gcd($1,$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_gcd</description>\n</snippet>\n"], ["lcm", "\n<snippet>\n\t<content><![CDATA[std::lcm($1,$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_lcm</description>\n</snippet>\n"], ["midpoint", "\n<snippet>\n\t<content><![CDATA[std::midpoint($1,$0)]]></content>\n\t<scope>source.c++</scope>\n\t<description>voice_cpp_midpoint</description>\n</snippet>\n"]]